{"version":3,"sources":["components/Note.jsx","utils/axios.js","services/note.js","components/Notification.jsx","components/Footer.jsx","App.jsx","index.jsx"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","throwError","response","status","statusText","error","Error","get","url","a","fetch","ok","json","post","data","options","method","headers","body","JSON","stringify","console","log","put","axios","newObject","id","Notification","message","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","then","initialNotes","catch","e","notesToShow","filter","map","i","key","find","n","changedNote","returnedNote","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d539f5b3.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\n    const label = note.important\n          ? 'make not important' : 'make important'\n\n    return (\n        <li className='note'>\n          {note.content}\n          <button onClick={toggleImportance}>{label}</button>\n        </li>\n    )\n}\n\nexport default Note\n","const throwError = (response) => {\n    const [status, statusText] = [response.status, response.statusText]\n    const error = `Request failed with status code ${status} (${statusText})`\n    throw new Error(error)\n}\n\nconst get = async (url) => {\n    const response = await fetch(url)\n    if (!response.ok) throwError(response)\n    const json = await response.json()\n    return json\n}\n\nconst post = async (url, data) => {\n    const options = {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json;charset=utf-8'\n        },\n        body: JSON.stringify(data)\n    }\n    const response = await fetch(url, options)\n    console.log(response)\n    if (!response.ok) throwError(response)\n    const json = await response.json()\n    return json\n}\n\nconst put = async (url, data) => {\n    const options = {\n        method: 'PUT',\n        headers: {\n            'Content-Type': 'application/json;charset=utf-8',\n        },\n        body: JSON.stringify(data)\n    }\n    const response = await fetch(url, options)\n    if (!response.ok) throwError(response)\n    const json = await response.json()\n    return json\n}\n\nexport default {get, post, put}\n","import axios from '../utils/axios'\n\nconst baseUrl = '/api/notes'\n\nconst getAll = () => {\n    return axios.get(baseUrl)\n}\n\nconst create = newObject => {\n    return axios.post(baseUrl, newObject)\n}\n\nconst update = (id, newObject) => {\n    return axios.put(`${baseUrl}/${id}`, newObject)\n}\n\nexport default { getAll, create, update }\n","import React from 'react'\n\nconst Notification = ({message}) => {\n    if (message === null) {\n        return null\n    }\n\n    return (\n        <div className='error'>\n          {message}\n        </div>\n    )\n}\n\nexport default Notification\n","import React from 'react'\n\nconst Footer = () => {\n    const footerStyle = {\n        color: 'green',\n        fontStyle: 'italic',\n        fontSize: 16\n    }\n\n    return (\n        <div style={footerStyle}>\n          <br />\n          <em>Note app, Department of Computer Science, University of Helsinki 2020</em>\n        </div>\n    )\n}\n\nexport default Footer\n","import React, { useState, useEffect } from 'react'\nimport Note from './components/Note'\nimport noteService from './services/note'\nimport Notification from './components/Notification'\nimport Footer from './components/Footer'\n\nconst App = () => {\n    const [notes, setNotes] = useState([])\n    const [newNote, setNewNote] = useState('')\n    const [showAll, setShowAll] = useState(true)\n    const [errorMessage, setErrorMessage] = useState(null)\n\n    useEffect(() => {\n        noteService\n            .getAll()\n            .then(initialNotes => {\n                setNotes(initialNotes)\n            })\n            .catch(e => {\n                const error = e.response.data.error\n                setErrorMessage(error)\n            })\n    }, [])\n\n    const toggleImportanceOf = (id) => {\n        const note = notes.find(n => n.id === id)\n        const changedNote = {...note, important: !note.important}\n\n        noteService\n            .update(id, changedNote)\n            .then(returnedNote => {\n                setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n            })\n            .catch(error => {\n                console.error(error)\n                setErrorMessage(\n                    `Note '${note.content}' was already removed from server`\n                )\n                setTimeout(() => {\n                    setErrorMessage(null)\n                }, 5000)\n                setNotes(notes.filter(n => n.id !== id))\n            })\n    }\n\n    const addNote = (event) => {\n        event.preventDefault()\n        const noteObject = {\n            content: newNote,\n            date: new Date().toISOString(),\n            important: Math.random() < 0.5\n        }\n\n        noteService\n            .create(noteObject)\n            .then(returnedNote => {\n              console.log('@@@@', returnedNote)\n                setNotes(notes.concat(returnedNote))\n                setNewNote('')\n            })\n            .catch(e => {\n              console.log('****', e)\n                //const error = e.response.data.error\n                setErrorMessage(e)\n            })\n        //setNotes(notes.concat(noteObject))\n        setNewNote('')\n    }\n\n    const handleNoteChange = (event) => {\n        setNewNote(event.target.value)\n    }\n\n    const notesToShow = showAll\n          ? notes\n          : notes.filter(note => note.important)\n\n    return (\n        <div>\n          <h1>Notes</h1>\n          <Notification message={errorMessage}/>\n          <div>\n            <button onClick={() => setShowAll(!showAll)}>\n              show {showAll ? 'important' : 'all'}\n            </button>\n          </div>\n          <ul>\n            {notesToShow.map((note, i) => {\n                return <Note\n                         key={i}\n                         note={note}\n                         toggleImportance={() => toggleImportanceOf(note.id)}\n                       />\n            })}\n          </ul>\n          <form onSubmit={addNote}>\n            <input\n              value={newNote}\n              onChange={handleNoteChange}\n            />\n            <button type='submit'>save</button>\n          </form>\n          <Footer />\n        </div>\n    )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n)\n"],"sourceRoot":""}